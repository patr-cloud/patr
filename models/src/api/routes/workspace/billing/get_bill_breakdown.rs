use axum_extra::routing::TypedPath;
use reqwest::Method;
use serde::{Deserialize, Serialize};

use super::WorkspaceBillBreakdown;
use crate::{utils::Uuid, ApiRequest};

#[derive(
	Eq,
	Ord,
	Hash,
	Debug,
	Clone,
	Default,
	TypedPath,
	PartialEq,
	Serialize,
	PartialOrd,
	Deserialize,
)]
#[typed_path("/workspace/:workspace_id/billing/bill-breakdown")]
pub struct GetBillBreakdownPath {
	pub workspace_id: Uuid,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetBillBreakdownRequest {
	#[serde(default = "crate::utils::get_current_month")]
	pub month: u32,
	#[serde(default = "crate::utils::get_current_year")]
	pub year: u32,
}

impl ApiRequest for GetBillBreakdownRequest {
	const METHOD: Method = Method::GET;
	const IS_PROTECTED: bool = true;

	type RequestPath = GetBillBreakdownPath;
	type RequestQuery = Self;
	type RequestBody = ();
	type Response = GetBillBreakdownResponse;
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetBillBreakdownResponse {
	pub bill: WorkspaceBillBreakdown,
}

#[cfg(test)]
mod test {
	use serde_test::{assert_tokens, Token};

	use super::{GetBillBreakdownRequest, GetBillBreakdownResponse};
	use crate::{
		models::workspace::{
			billing::{
				DatabaseUsage,
				DeploymentBill,
				DeploymentUsage,
				DockerRepositoryUsage,
				DomainPlan,
				DomainUsage,
				ManagedUrlUsage,
				SecretUsage,
				StaticSitePlan,
				StaticSiteUsage,
				VolumeUsage,
				WorkspaceBillBreakdown,
			},
			infrastructure::list_all_deployment_machine_type::DeploymentMachineType,
		},
		utils::{DateTime, Uuid},
		ApiResponse,
	};

	#[test]
	fn assert_request_types() {
		assert_tokens(
			&GetBillBreakdownRequest {
				month: 5,
				year: 2022,
			},
			&[
				Token::Struct {
					name: "GetBillBreakdownRequest",
					len: 2,
				},
				Token::Str("month"),
				Token::U32(5),
				Token::Str("year"),
				Token::U32(2022),
				Token::StructEnd,
			],
		);
	}

	#[test]
	fn assert_response_types() {
		assert_tokens(
			&GetBillBreakdownResponse {
				bill: WorkspaceBillBreakdown {
					year: 2022,
					month: 5,
					total_charge: 22400,
					deployment_charge: 3200,
					deployment_usage: vec![DeploymentUsage {
						name: "test-deplo".to_string(),
						deployment_id: Uuid::parse_str(
							"d5727fb4-9e6b-43df-8a46-0c698340fffb",
						)
						.unwrap(),
						is_deleted: false,
						deployment_bill: vec![DeploymentBill {
							start_time: DateTime::default(),
							stop_time: Some(DateTime::default()),
							machine_type: DeploymentMachineType {
								id: Uuid::parse_str(
									"d5727fb4-9e6b-43df-8a46-0c698340fffb",
								)
								.unwrap(),
								cpu_count: 1,
								memory_count: 2,
							},
							amount: 3200,
							num_instances: 2,
							hours: 720,
							monthly_charge: 3200,
						}],
					}],
					volume_charge: 3200,
					volume_usage: vec![VolumeUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						storage: 500,
						number_of_volume: 5,
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					database_charge: 3200,
					database_usage: vec![DatabaseUsage {
						start_time: DateTime::default(),
						deletion_time: Some(DateTime::default()),
						database_id: Uuid::parse_str(
							"d5727fb4-9e6b-43df-8a46-0c698340fffb",
						)
						.unwrap(),
						name: "mydb".to_string(),
						hours: 720,
						amount: 3200,
						is_deleted: false,
						monthly_charge: 3200,
						plan: "micro".to_string(),
					}],
					static_site_charge: 3200,
					static_site_usage: vec![StaticSiteUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: StaticSitePlan::Free,
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					domain_charge: 3200,
					domain_usage: vec![DomainUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: DomainPlan::Free,
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					managed_url_charge: 3200,
					managed_url_usage: vec![ManagedUrlUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: "overused".to_string(),
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					secret_charge: 3200,
					secret_usage: vec![SecretUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: "overused".to_string(),
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					docker_repository_charge: 3200,
					docker_repository_usage: vec![DockerRepositoryUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: "overused".to_string(),
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
				},
			},
			&[
				Token::Struct {
					name: "GetBillBreakdownResponse",
					len: 1,
				},
				Token::Str("bill"),
				Token::Struct {
					name: "WorkspaceBillBreakdown",
					len: 19,
				},
				Token::Str("year"),
				Token::U32(2022),
				Token::Str("month"),
				Token::U32(5),
				Token::Str("totalCharge"),
				Token::U64(22400),
				Token::Str("deploymentCharge"),
				Token::U64(3200),
				Token::Str("deploymentUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DeploymentUsage",
					len: 4,
				},
				Token::Str("name"),
				Token::Str("test-deplo"),
				Token::Str("deploymentId"),
				Token::Str("d5727fb49e6b43df8a460c698340fffb"),
				Token::Str("deploymentBill"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DeploymentBill",
					len: 7,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("machineType"),
				Token::Struct {
					name: "DeploymentMachineType",
					len: 3,
				},
				Token::Str("id"),
				Token::Str("d5727fb49e6b43df8a460c698340fffb"),
				Token::Str("cpuCount"),
				Token::I16(1),
				Token::Str("memoryCount"),
				Token::I32(2),
				Token::StructEnd,
				Token::Str("numInstances"),
				Token::U32(2),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("isDeleted"),
				Token::Bool(false),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("volumeCharge"),
				Token::U64(3200),
				Token::Str("volumeUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "VolumeUsage",
					len: 7,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("storage"),
				Token::U64(500),
				Token::Str("numberOfVolume"),
				Token::U32(5),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("databaseCharge"),
				Token::U64(3200),
				Token::Str("databaseUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DatabaseUsage",
					len: 9,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("deletionTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("databaseId"),
				Token::Str("d5727fb49e6b43df8a460c698340fffb"),
				Token::Str("name"),
				Token::Str("mydb"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("isDeleted"),
				Token::Bool(false),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::Str("plan"),
				Token::Str("micro"),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("staticSiteCharge"),
				Token::U64(3200),
				Token::Str("staticSiteUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "StaticSiteUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::UnitVariant {
					name: "StaticSitePlan",
					variant: "Free",
				},
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("domainCharge"),
				Token::U64(3200),
				Token::Str("domainUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DomainUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::UnitVariant {
					name: "DomainPlan",
					variant: "Free",
				},
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("managedUrlCharge"),
				Token::U64(3200),
				Token::Str("managedUrlUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "ManagedUrlUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::Str("overused"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("secretCharge"),
				Token::U64(3200),
				Token::Str("secretUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "SecretUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::Str("overused"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("dockerRepositoryCharge"),
				Token::U64(3200),
				Token::Str("dockerRepositoryUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DockerRepositoryUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::Str("overused"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::StructEnd,
				Token::StructEnd,
			],
		);
	}

	#[test]
	fn assert_success_response_types() {
		assert_tokens(
			&ApiResponse::success(GetBillBreakdownResponse {
				bill: WorkspaceBillBreakdown {
					year: 2022,
					month: 5,
					total_charge: 22400,
					deployment_charge: 3200,
					deployment_usage: vec![DeploymentUsage {
						name: "test-deplo".to_string(),
						deployment_id: Uuid::parse_str(
							"d5727fb4-9e6b-43df-8a46-0c698340fffb",
						)
						.unwrap(),
						is_deleted: false,
						deployment_bill: vec![DeploymentBill {
							start_time: DateTime::default(),
							stop_time: Some(DateTime::default()),
							machine_type: DeploymentMachineType {
								id: Uuid::parse_str(
									"d5727fb4-9e6b-43df-8a46-0c698340fffb",
								)
								.unwrap(),
								cpu_count: 1,
								memory_count: 2,
							},
							amount: 3200,
							num_instances: 2,
							hours: 720,
							monthly_charge: 3200,
						}],
					}],
					volume_charge: 3200,
					volume_usage: vec![VolumeUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						storage: 500,
						number_of_volume: 5,
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					database_charge: 3200,
					database_usage: vec![DatabaseUsage {
						start_time: DateTime::default(),
						deletion_time: Some(DateTime::default()),
						database_id: Uuid::parse_str(
							"d5727fb4-9e6b-43df-8a46-0c698340fffb",
						)
						.unwrap(),
						name: "mydb".to_string(),
						hours: 720,
						amount: 3200,
						is_deleted: false,
						monthly_charge: 3200,
						plan: "micro".to_string(),
					}],
					static_site_charge: 3200,
					static_site_usage: vec![StaticSiteUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: StaticSitePlan::Free,
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					domain_charge: 3200,
					domain_usage: vec![DomainUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: DomainPlan::Free,
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					managed_url_charge: 3200,
					managed_url_usage: vec![ManagedUrlUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: "overused".to_string(),
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					secret_charge: 3200,
					secret_usage: vec![SecretUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: "overused".to_string(),
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
					docker_repository_charge: 3200,
					docker_repository_usage: vec![DockerRepositoryUsage {
						start_time: DateTime::default(),
						stop_time: Some(DateTime::default()),
						plan: "overused".to_string(),
						hours: 720,
						amount: 3200,
						monthly_charge: 3200,
					}],
				},
			}),
			&[
				Token::Map { len: None },
				Token::Str("success"),
				Token::Bool(true),
				Token::Str("bill"),
				Token::Struct {
					name: "WorkspaceBillBreakdown",
					len: 19,
				},
				Token::Str("year"),
				Token::U32(2022),
				Token::Str("month"),
				Token::U32(5),
				Token::Str("totalCharge"),
				Token::U64(22400),
				Token::Str("deploymentCharge"),
				Token::U64(3200),
				Token::Str("deploymentUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DeploymentUsage",
					len: 4,
				},
				Token::Str("name"),
				Token::Str("test-deplo"),
				Token::Str("deploymentId"),
				Token::Str("d5727fb49e6b43df8a460c698340fffb"),
				Token::Str("deploymentBill"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DeploymentBill",
					len: 7,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("machineType"),
				Token::Struct {
					name: "DeploymentMachineType",
					len: 3,
				},
				Token::Str("id"),
				Token::Str("d5727fb49e6b43df8a460c698340fffb"),
				Token::Str("cpuCount"),
				Token::I16(1),
				Token::Str("memoryCount"),
				Token::I32(2),
				Token::StructEnd,
				Token::Str("numInstances"),
				Token::U32(2),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("isDeleted"),
				Token::Bool(false),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("volumeCharge"),
				Token::U64(3200),
				Token::Str("volumeUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "VolumeUsage",
					len: 7,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("storage"),
				Token::U64(500),
				Token::Str("numberOfVolume"),
				Token::U32(5),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("databaseCharge"),
				Token::U64(3200),
				Token::Str("databaseUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DatabaseUsage",
					len: 9,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("deletionTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("databaseId"),
				Token::Str("d5727fb49e6b43df8a460c698340fffb"),
				Token::Str("name"),
				Token::Str("mydb"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("isDeleted"),
				Token::Bool(false),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::Str("plan"),
				Token::Str("micro"),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("staticSiteCharge"),
				Token::U64(3200),
				Token::Str("staticSiteUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "StaticSiteUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::UnitVariant {
					name: "StaticSitePlan",
					variant: "Free",
				},
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("domainCharge"),
				Token::U64(3200),
				Token::Str("domainUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DomainUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::UnitVariant {
					name: "DomainPlan",
					variant: "Free",
				},
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("managedUrlCharge"),
				Token::U64(3200),
				Token::Str("managedUrlUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "ManagedUrlUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::Str("overused"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("secretCharge"),
				Token::U64(3200),
				Token::Str("secretUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "SecretUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::Str("overused"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::Str("dockerRepositoryCharge"),
				Token::U64(3200),
				Token::Str("dockerRepositoryUsage"),
				Token::Seq { len: Some(1) },
				Token::Struct {
					name: "DockerRepositoryUsage",
					len: 6,
				},
				Token::Str("startTime"),
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("stopTime"),
				Token::Some,
				Token::Str("Thu, 01 Jan 1970 00:00:00 +0000"),
				Token::Str("plan"),
				Token::Str("overused"),
				Token::Str("hours"),
				Token::U64(720),
				Token::Str("amount"),
				Token::U64(3200),
				Token::Str("monthlyCharge"),
				Token::U64(3200),
				Token::StructEnd,
				Token::SeqEnd,
				Token::StructEnd,
				Token::MapEnd,
			],
		);
	}
}
