//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "static_site_upload_history")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub upload_id: Uuid,
	pub static_site_id: Uuid,
	#[sea_orm(column_type = "Text")]
	pub message: String,
	pub uploaded_by: Uuid,
	pub created: TimeDateTimeWithTimeZone,
	pub processed: Option<TimeDateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::UploadId",
		to = "super::resource::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource,
	#[sea_orm(
		belongs_to = "super::static_site::Entity",
		from = "Column::StaticSiteId",
		to = "super::static_site::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	StaticSite,
	#[sea_orm(
		belongs_to = "super::user::Entity",
		from = "Column::UploadedBy",
		to = "super::user::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	User,
}

impl Related<super::resource::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Resource.def()
	}
}

impl Related<super::static_site::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::StaticSite.def()
	}
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
