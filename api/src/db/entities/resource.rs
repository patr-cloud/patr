//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "resource")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub resource_type_id: Uuid,
	pub owner_id: Uuid,
	pub created: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::deployment::Entity")]
	Deployment,
	#[sea_orm(has_many = "super::docker_registry_repository::Entity")]
	DockerRegistryRepository,
	#[sea_orm(has_many = "super::managed_database::Entity")]
	ManagedDatabase,
	#[sea_orm(has_many = "super::patr_domain_dns_record::Entity")]
	PatrDomainDnsRecord,
	#[sea_orm(has_many = "super::region::Entity")]
	Region,
	#[sea_orm(
		belongs_to = "super::resource_type::Entity",
		from = "Column::ResourceTypeId",
		to = "super::resource_type::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ResourceType,
	#[sea_orm(has_many = "super::role_resource_permissions_exclude::Entity")]
	RoleResourcePermissionsExclude,
	#[sea_orm(has_many = "super::role_resource_permissions_include::Entity")]
	RoleResourcePermissionsInclude,
	#[sea_orm(has_many = "super::secret::Entity")]
	Secret,
	#[sea_orm(has_many = "super::static_site::Entity")]
	StaticSite,
	#[sea_orm(has_many = "super::static_site_upload_history::Entity")]
	StaticSiteUploadHistory,
	#[sea_orm(has_many = "super::user_api_token_resource_permissions_exclude::Entity")]
	UserApiTokenResourcePermissionsExclude,
	#[sea_orm(has_many = "super::user_api_token_resource_permissions_include::Entity")]
	UserApiTokenResourcePermissionsInclude,
	#[sea_orm(
		belongs_to = "super::workspace::Entity",
		from = "Column::OwnerId",
		to = "super::workspace::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Workspace,
	#[sea_orm(has_many = "super::workspace_audit_log::Entity")]
	WorkspaceAuditLog,
	#[sea_orm(has_many = "super::workspace_domain::Entity")]
	WorkspaceDomain,
}

impl Related<super::deployment::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Deployment.def()
	}
}

impl Related<super::docker_registry_repository::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DockerRegistryRepository.def()
	}
}

impl Related<super::managed_database::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ManagedDatabase.def()
	}
}

impl Related<super::patr_domain_dns_record::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PatrDomainDnsRecord.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Region.def()
	}
}

impl Related<super::resource_type::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ResourceType.def()
	}
}

impl Related<super::role_resource_permissions_exclude::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::RoleResourcePermissionsExclude.def()
	}
}

impl Related<super::role_resource_permissions_include::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::RoleResourcePermissionsInclude.def()
	}
}

impl Related<super::secret::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Secret.def()
	}
}

impl Related<super::static_site::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::StaticSite.def()
	}
}

impl Related<super::static_site_upload_history::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::StaticSiteUploadHistory.def()
	}
}

impl Related<super::user_api_token_resource_permissions_exclude::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserApiTokenResourcePermissionsExclude.def()
	}
}

impl Related<super::user_api_token_resource_permissions_include::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserApiTokenResourcePermissionsInclude.def()
	}
}

impl Related<super::workspace::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Workspace.def()
	}
}

impl Related<super::workspace_audit_log::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::WorkspaceAuditLog.def()
	}
}

impl Related<super::workspace_domain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::WorkspaceDomain.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
