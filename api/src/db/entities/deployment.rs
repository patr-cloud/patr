//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::{DeploymentStatus, ExposedPortType};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "deployment")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	#[sea_orm(column_type = "custom(\"citext\")")]
	pub name: String,
	pub registry: String,
	pub repository_id: Option<Uuid>,
	pub image_name: Option<String>,
	pub image_tag: String,
	pub status: DeploymentStatus,
	pub workspace_id: Uuid,
	pub region: Uuid,
	pub min_horizontal_scale: i16,
	pub max_horizontal_scale: i16,
	pub machine_type: Uuid,
	pub deploy_on_push: bool,
	pub startup_probe_port: Option<i32>,
	pub startup_probe_path: Option<String>,
	pub startup_probe_port_type: Option<ExposedPortType>,
	pub liveness_probe_port: Option<i32>,
	pub liveness_probe_path: Option<String>,
	pub liveness_probe_port_type: Option<ExposedPortType>,
	#[sea_orm(column_type = "Text", nullable)]
	pub current_live_digest: Option<String>,
	pub deleted: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::deployment_config_mounts::Entity")]
	DeploymentConfigMounts,
	#[sea_orm(
		belongs_to = "super::deployment_deploy_history::Entity",
		from = "Column::Id",
		to = "super::deployment_deploy_history::Column::DeploymentId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DeploymentDeployHistory,
	#[sea_orm(has_many = "super::deployment_environment_variable::Entity")]
	DeploymentEnvironmentVariable,
	#[sea_orm(
		belongs_to = "super::deployment_exposed_port::Entity",
		from = "Column::Id",
		to = "super::deployment_exposed_port::Column::PortType",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DeploymentExposedPort2,
	#[sea_orm(
		belongs_to = "super::deployment_exposed_port::Entity",
		from = "Column::Id",
		to = "super::deployment_exposed_port::Column::Port",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DeploymentExposedPort1,
	#[sea_orm(
		belongs_to = "super::deployment_machine_type::Entity",
		from = "Column::MachineType",
		to = "super::deployment_machine_type::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DeploymentMachineType,
	#[sea_orm(has_many = "super::deployment_volume::Entity")]
	DeploymentVolume,
	#[sea_orm(
		belongs_to = "super::docker_registry_repository::Entity",
		from = "Column::RepositoryId",
		to = "super::docker_registry_repository::Column::WorkspaceId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DockerRegistryRepository,
	#[sea_orm(has_many = "super::managed_url::Entity")]
	ManagedUrl,
	#[sea_orm(
		belongs_to = "super::region::Entity",
		from = "Column::Region",
		to = "super::region::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Region,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::Id",
		to = "super::resource::Column::OwnerId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource,
}

impl Related<super::deployment_config_mounts::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DeploymentConfigMounts.def()
	}
}

impl Related<super::deployment_deploy_history::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DeploymentDeployHistory.def()
	}
}

impl Related<super::deployment_environment_variable::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DeploymentEnvironmentVariable.def()
	}
}

impl Related<super::deployment_machine_type::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DeploymentMachineType.def()
	}
}

impl Related<super::deployment_volume::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DeploymentVolume.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Region.def()
	}
}

impl Related<super::resource::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Resource.def()
	}
}

impl Related<super::docker_registry_repository::Entity> for Entity {
	fn to() -> RelationDef {
		super::deployment_deploy_history::Relation::DockerRegistryRepository
			.def()
	}
	fn via() -> Option<RelationDef> {
		Some(
			super::deployment_deploy_history::Relation::Deployment
				.def()
				.rev(),
		)
	}
}

impl Related<super::managed_url::Entity> for Entity {
	fn to() -> RelationDef {
		super::deployment_exposed_port::Relation::ManagedUrl.def()
	}
	fn via() -> Option<RelationDef> {
		Some(
			super::deployment_exposed_port::Relation::Deployment
				.def()
				.rev(),
		)
	}
}

impl Related<super::secret::Entity> for Entity {
	fn to() -> RelationDef {
		super::deployment_environment_variable::Relation::Secret.def()
	}
	fn via() -> Option<RelationDef> {
		Some(
			super::deployment_environment_variable::Relation::Deployment
				.def()
				.rev(),
		)
	}
}

impl ActiveModelBehavior for ActiveModel {}
