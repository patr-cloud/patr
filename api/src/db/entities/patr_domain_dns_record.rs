//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::DnsRecordType;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "patr_domain_dns_record")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	#[sea_orm(column_type = "Text")]
	pub record_identifier: String,
	pub domain_id: Uuid,
	#[sea_orm(column_type = "Text")]
	pub name: String,
	pub r#type: DnsRecordType,
	#[sea_orm(column_type = "Text")]
	pub value: String,
	pub priority: Option<i32>,
	pub ttl: i64,
	pub proxied: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::patr_controlled_domain::Entity",
		from = "Column::DomainId",
		to = "super::patr_controlled_domain::Column::DomainId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	PatrControlledDomain,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::Id",
		to = "super::resource::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource,
}

impl Related<super::patr_controlled_domain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PatrControlledDomain.def()
	}
}

impl Related<super::resource::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Resource.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
