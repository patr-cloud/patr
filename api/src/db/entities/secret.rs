//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "secret")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	#[sea_orm(column_type = "custom(\"citext\")")]
	pub name: String,
	pub workspace_id: Uuid,
	pub deleted: Option<TimeDateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::deployment_environment_variable::Entity")]
	DeploymentEnvironmentVariable,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::Id",
		to = "super::resource::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource,
}

impl Related<super::deployment_environment_variable::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DeploymentEnvironmentVariable.def()
	}
}

impl Related<super::resource::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Resource.def()
	}
}

impl Related<super::deployment::Entity> for Entity {
	fn to() -> RelationDef {
		super::deployment_environment_variable::Relation::Deployment.def()
	}
	fn via() -> Option<RelationDef> {
		Some(
			super::deployment_environment_variable::Relation::Secret
				.def()
				.rev(),
		)
	}
}

impl ActiveModelBehavior for ActiveModel {}
