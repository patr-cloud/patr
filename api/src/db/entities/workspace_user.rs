//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "workspace_user")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub user_id: Uuid,
	#[sea_orm(primary_key, auto_increment = false)]
	pub workspace_id: Uuid,
	#[sea_orm(primary_key, auto_increment = false)]
	pub role_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::role::Entity",
		from = "Column::RoleId",
		to = "super::role::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Role,
	#[sea_orm(
		belongs_to = "super::user::Entity",
		from = "Column::UserId",
		to = "super::user::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	User,
	#[sea_orm(
		belongs_to = "super::workspace::Entity",
		from = "Column::WorkspaceId",
		to = "super::workspace::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Workspace,
}

impl Related<super::role::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Role.def()
	}
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl Related<super::workspace::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Workspace.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
