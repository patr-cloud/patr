//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::{DomainNameserverType, ResourceOwnerType};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "workspace_domain")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub domain_type: ResourceOwnerType,
	pub is_verified: bool,
	pub nameserver_type: DomainNameserverType,
	pub last_unverified: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "Text")]
	pub cloudflare_worker_route_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::domain::Entity",
		from = "Column::Id",
		to = "super::domain::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Domain,
	#[sea_orm(has_many = "super::managed_url::Entity")]
	ManagedUrl,
	#[sea_orm(has_many = "super::patr_controlled_domain::Entity")]
	PatrControlledDomain,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::Id",
		to = "super::resource::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource,
	#[sea_orm(has_many = "super::user_controlled_domain::Entity")]
	UserControlledDomain,
}

impl Related<super::domain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Domain.def()
	}
}

impl Related<super::managed_url::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ManagedUrl.def()
	}
}

impl Related<super::patr_controlled_domain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PatrControlledDomain.def()
	}
}

impl Related<super::resource::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Resource.def()
	}
}

impl Related<super::user_controlled_domain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserControlledDomain.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
