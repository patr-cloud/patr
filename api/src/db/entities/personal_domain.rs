//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::ResourceOwnerType;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "personal_domain")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub domain_type: ResourceOwnerType,
	pub deleted: Option<TimeDateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::domain::Entity",
		from = "Column::Id",
		to = "super::domain::Column::Type",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Domain,
	#[sea_orm(has_many = "super::personal_email::Entity")]
	PersonalEmail,
	#[sea_orm(has_many = "super::user_to_sign_up::Entity")]
	UserToSignUp,
	#[sea_orm(has_many = "super::user_unverified_personal_email::Entity")]
	UserUnverifiedPersonalEmail,
}

impl Related<super::domain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Domain.def()
	}
}

impl Related<super::personal_email::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PersonalEmail.def()
	}
}

impl Related<super::user_to_sign_up::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserToSignUp.def()
	}
}

impl Related<super::user_unverified_personal_email::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserUnverifiedPersonalEmail.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
