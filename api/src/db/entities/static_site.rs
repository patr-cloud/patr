//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::DeploymentStatus;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "static_site")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	#[sea_orm(column_type = "custom(\"citext\")")]
	pub name: String,
	pub status: DeploymentStatus,
	pub workspace_id: Uuid,
	pub current_live_upload: Option<Uuid>,
	pub deleted: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::managed_url::Entity")]
	ManagedUrl,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::Id",
		to = "super::resource::Column::OwnerId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource,
	#[sea_orm(
		belongs_to = "super::static_site_upload_history::Entity",
		from = "Column::Id",
		to = "super::static_site_upload_history::Column::StaticSiteId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	StaticSiteUploadHistory,
}

impl Related<super::managed_url::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ManagedUrl.def()
	}
}

impl Related<super::resource::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Resource.def()
	}
}

impl Related<super::static_site_upload_history::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::StaticSiteUploadHistory.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
