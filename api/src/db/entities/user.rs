//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	#[sea_orm(unique)]
	pub username: String,
	#[sea_orm(column_type = "Text")]
	pub password: String,
	pub first_name: String,
	pub last_name: String,
	pub created: DateTimeWithTimeZone,
	pub recovery_email_local: Option<String>,
	pub recovery_email_domain_id: Option<Uuid>,
	pub recovery_phone_country_code: Option<String>,
	pub recovery_phone_number: Option<String>,
	pub workspace_limit: i32,
	#[sea_orm(column_type = "Text", nullable)]
	pub mfa_secret: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub password_reset_token: Option<String>,
	pub password_reset_token_expiry: Option<DateTimeWithTimeZone>,
	pub password_reset_attempts: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::personal_email::Entity",
		from = "Column::Id",
		to = "super::personal_email::Column::UserId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	PersonalEmail,
	#[sea_orm(has_many = "super::static_site_upload_history::Entity")]
	StaticSiteUploadHistory,
	#[sea_orm(has_many = "super::user_login::Entity")]
	UserLogin,
	#[sea_orm(
		belongs_to = "super::user_phone_number::Entity",
		from = "Column::Id",
		to = "super::user_phone_number::Column::CountryCode",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	UserPhoneNumber,
	#[sea_orm(has_many = "super::user_unverified_personal_email::Entity")]
	UserUnverifiedPersonalEmail,
	#[sea_orm(has_many = "super::user_unverified_phone_number::Entity")]
	UserUnverifiedPhoneNumber,
	#[sea_orm(has_many = "super::workspace::Entity")]
	Workspace,
	#[sea_orm(has_many = "super::workspace_audit_log::Entity")]
	WorkspaceAuditLog,
	#[sea_orm(has_many = "super::workspace_user::Entity")]
	WorkspaceUser,
}

impl Related<super::personal_email::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PersonalEmail.def()
	}
}

impl Related<super::static_site_upload_history::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::StaticSiteUploadHistory.def()
	}
}

impl Related<super::user_login::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserLogin.def()
	}
}

impl Related<super::user_phone_number::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserPhoneNumber.def()
	}
}

impl Related<super::user_unverified_personal_email::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserUnverifiedPersonalEmail.def()
	}
}

impl Related<super::user_unverified_phone_number::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserUnverifiedPhoneNumber.def()
	}
}

impl Related<super::workspace::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Workspace.def()
	}
}

impl Related<super::workspace_audit_log::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::WorkspaceAuditLog.def()
	}
}

impl Related<super::workspace_user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::WorkspaceUser.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
