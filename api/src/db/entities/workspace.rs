//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::PaymentType;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "workspace")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	#[sea_orm(column_type = "custom(\"citext\")")]
	pub name: String,
	pub super_admin_id: Uuid,
	pub payment_type: PaymentType,
	#[sea_orm(column_type = "Text", nullable)]
	pub default_payment_method_id: Option<String>,
	pub deployment_limit: i32,
	pub database_limit: i32,
	pub static_site_limit: i32,
	pub managed_url_limit: i32,
	pub docker_repository_storage_limit: i32,
	pub domain_limit: i32,
	pub secret_limit: i32,
	#[sea_orm(column_type = "Text")]
	pub stripe_customer_id: String,
	pub amount_due_in_cents: i64,
	pub deleted: Option<TimeDateTimeWithTimeZone>,
	pub volume_storage_limit: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::docker_registry_repository::Entity")]
	DockerRegistryRepository,
	#[sea_orm(has_many = "super::managed_database::Entity")]
	ManagedDatabase,
	#[sea_orm(
		belongs_to = "super::payment_method::Entity",
		from = "Column::DefaultPaymentMethodId",
		to = "super::payment_method::Column::PaymentMethodId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	PaymentMethod,
	#[sea_orm(has_many = "super::region::Entity")]
	Region,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::Id",
		to = "super::resource::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource,
	#[sea_orm(has_many = "super::role::Entity")]
	Role,
	#[sea_orm(has_many = "super::transaction::Entity")]
	Transaction,
	#[sea_orm(
		belongs_to = "super::user::Entity",
		from = "Column::SuperAdminId",
		to = "super::user::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	User,
	#[sea_orm(has_many = "super::user_api_token_workspace_super_admin::Entity")]
	UserApiTokenWorkspaceSuperAdmin,
	#[sea_orm(has_many = "super::workspace_audit_log::Entity")]
	WorkspaceAuditLog,
	#[sea_orm(has_many = "super::workspace_user::Entity")]
	WorkspaceUser,
}

impl Related<super::docker_registry_repository::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DockerRegistryRepository.def()
	}
}

impl Related<super::managed_database::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ManagedDatabase.def()
	}
}

impl Related<super::payment_method::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PaymentMethod.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Region.def()
	}
}

impl Related<super::resource::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Resource.def()
	}
}

impl Related<super::role::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Role.def()
	}
}

impl Related<super::transaction::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Transaction.def()
	}
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl Related<super::user_api_token_workspace_super_admin::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserApiTokenWorkspaceSuperAdmin.def()
	}
}

impl Related<super::workspace_audit_log::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::WorkspaceAuditLog.def()
	}
}

impl Related<super::workspace_user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::WorkspaceUser.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
