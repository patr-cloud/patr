//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::ManagedUrlType;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "managed_url")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	#[sea_orm(column_type = "Text")]
	pub sub_domain: String,
	pub domain_id: Uuid,
	#[sea_orm(column_type = "Text")]
	pub path: String,
	pub url_type: ManagedUrlType,
	pub deployment_id: Option<Uuid>,
	pub port: Option<i32>,
	pub static_site_id: Option<Uuid>,
	#[sea_orm(column_type = "Text", nullable)]
	pub url: Option<String>,
	pub workspace_id: Uuid,
	pub is_configured: bool,
	pub deleted: Option<DateTimeWithTimeZone>,
	pub permanent_redirect: Option<bool>,
	pub http_only: Option<bool>,
	#[sea_orm(column_type = "Text")]
	pub cloudflare_custom_hostname_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::deployment::Entity",
		from = "Column::DeploymentId",
		to = "super::deployment::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Deployment,
	#[sea_orm(
		belongs_to = "super::deployment_exposed_port::Entity",
		from = "Column::DeploymentId",
		to = "super::deployment_exposed_port::Column::Port",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DeploymentExposedPort,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::DomainId",
		to = "super::resource::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource2,
	#[sea_orm(
		belongs_to = "super::resource::Entity",
		from = "Column::Id",
		to = "super::resource::Column::OwnerId",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Resource1,
	#[sea_orm(
		belongs_to = "super::static_site::Entity",
		from = "Column::StaticSiteId",
		to = "super::static_site::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	StaticSite,
	#[sea_orm(
		belongs_to = "super::workspace_domain::Entity",
		from = "Column::DomainId",
		to = "super::workspace_domain::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	WorkspaceDomain,
}

impl Related<super::deployment_exposed_port::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DeploymentExposedPort.def()
	}
}

impl Related<super::static_site::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::StaticSite.def()
	}
}

impl Related<super::workspace_domain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::WorkspaceDomain.def()
	}
}

impl Related<super::deployment::Entity> for Entity {
	fn to() -> RelationDef {
		super::deployment_exposed_port::Relation::Deployment.def()
	}
	fn via() -> Option<RelationDef> {
		Some(
			super::deployment_exposed_port::Relation::ManagedUrl
				.def()
				.rev(),
		)
	}
}

impl ActiveModelBehavior for ActiveModel {}
