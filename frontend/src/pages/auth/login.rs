use crate::prelude::*;

#[derive(Debug, Clone, Default)]
struct LoginData {
	username: String,
	password: String,
	mfa_otp: String,
}

/// The login page
#[component]
pub fn Login(
	/// The scope of the component
	cx: Scope,
) -> impl IntoView {
	let (login_loading, set_login_loading) = create_signal(cx, false);

	let (show_password, set_show_password) = create_signal(cx, false);
	let (show_create_account_button, set_show_create_account_button) =
		create_signal(cx, false);
	let (show_otp_input, set_show_otp_input) = create_signal(cx, false);
	let (inputs, set_inputs) = create_signal(cx, LoginData::default());
	let (input_errors, set_input_errors) =
		create_signal(cx, LoginData::default());

	let handle_login = |e: ev::SubmitEvent| {
		e.prevent_default();
		log::error!("{:#?}", e.target().unwrap().value_of().to_string());
	};

	view! { cx,
		<form class="box-onboard txt-white fc-fs-fs" on:submit=handle_login>
			<div class="fr-sb-bl mb-lg full-width">
				<h1 class="txt-primary txt-xl txt-medium">{"Sign In"}</h1>
				<p class="txt-white txt-thin fr-fs-fs">
					New user?
					<Link
						disabled={login_loading}
						to={"/sign-up"}
						class="ml-xs"
					>
						Sign Up
					</Link>
				</p>
			</div>
			<Input
				type_="text"
				class="full-width"
				disabled={login_loading}
				id="username"
				placeholder="Username/Email"
				value="test"
				start_icon={
					Some(IconProps::builder()
						.icon("user")
						.size(ExtraSmall)
						.build())
				}
			/>
			<div class="fr-fs-ct">
				{move || {
					input_errors
						.get()
						.username
						.some_if_not_empty()
						.map(|username| {
							view! {cx,
								<Alert
									r#type=NotificationType::Error
									class="mt-xs"
									message={input_errors.get().username}
									/>
							}
						})
				}}
				{move || show_create_account_button
					.with(|value| {
						value.then(move || view! { cx,
							<Link
								disabled={login_loading}
								// onClick={handleCreateNewAccount}
								class="ml-sm txt-underline txt-medium mt-xs"
							>
								Create a new account?
							</Link>
						})
					})
				}
			</div>
			// <Input
			// 	className="mt-md full-width"
			// 	type={showPassword ? "text" : "password"}
			// 	value={inputs.password}
			// 	id="password"
			// 	onChange={handleInputChange}
			// 	placeholder="Password"
			// 	disabled={loginLoading}
			// 	startIcon={<Icon icon="shield" size="xs" />}
			// 	endIcon={
			// 		showPassword ? (
			// 			<button
			// 				type="button"
			// 				onClick={() => setShowPassword(false)}
			// 				className="btn-icon"
			// 				aria-label="Hide password"
			// 			>
			// 				<Icon icon="eye" color="grey" size="xs" />
			// 			</button>
			// 		) : (
			// 			<button
			// 				type="button"
			// 				onClick={() => setShowPassword(true)}
			// 				className="btn-icon"
			// 				aria-label="Show password"
			// 			>
			// 				<Icon icon="eye-off" color="grey" size="xs" />
			// 			</button>
			// 		)
			// 	}
			// />
			// {inputErrors.password && (
			// 	<Alert type="error" message={inputErrors.password} className="mt-xs" />
			// )}
			// {showOtpInput && (
			// 	<>
			// 		<p className="mt-md">
			// 			{"Enter the OTP generated by your authenticator app to log in. <br />
			// 			This additional step is required as you've enabled Two-Factor
			// 			Authentication for your account."}
			// 		</p>
			// 		<OtpInput
			// 			otp={inputs.mfaOtp}
			// 			onChange={handleOtpChange}
			// 			disabled={loginLoading}
			// 			className="mt-xs"
			// 		/>
			// 		{inputErrors.mfaOtp && (
			// 			<Alert
			// 				type="error"
			// 				message={inputErrors.mfaOtp}
			// 				className="mt-xs"
			// 			/>
			// 		)}
			// 	</>
			// )}
			// <div className="fr-sb-ct full-width mt-xs">
			// 	<Link to={PublicPath.FORGOT_PASSWORD} disabled={loginLoading}>
			// 		Forgot Password?
			// 	</Link>
			// 	<label
			// 		htmlFor="rememberMe"
			// 		className="fr-fs-ct txt-primary cursor-pointer"
			// 	>
			// 		<input
			// 			type="checkbox"
			// 			id="rememberMe"
			// 			value="Remember Me"
			// 			className="mr-xs"
			// 			checked={rememberMe}
			// 			disabled={loginLoading}
			// 			onChange={(e) => setRememberMe(e.target.checked)}
			// 		/>
			// 		Remember Me
			// 	</label>
			// </div>
			// {loginLoading ? (
			// 	<Spinner className="mt-md mr-xl ml-auto" />
			// ) : (
			<Link type_="submit" variant=LinkVariant::Contained class="mt-md ml-auto">
				LOGIN
			</Link>
			// )}
		</form>
	}
}

/*
</form>
*/
