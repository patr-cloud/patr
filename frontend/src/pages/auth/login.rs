use std::rc::Rc;

use crate::prelude::*;

/// The login page
#[component]
pub fn Login(
	/// The scope of the component
	cx: Scope,
) -> impl IntoView {
	let (login_loading, set_login_loading) = create_signal(cx, false);
	let (show_password, set_show_password) = create_signal(cx, false);
	let (show_create_account_button, set_show_create_account_button) =
		create_signal(cx, false);

	let (show_otp_input, set_show_otp_input) = create_signal(cx, false);

	set_interval(move || {
		set_show_otp_input.update(|value| *value = !*value);
	}, std::time::Duration::from_secs(2));

	let (username_error, set_username_error) =
		create_signal(cx, String::from(""));
	let (password_error, set_password_error) =
		create_signal(cx, String::from(""));
	let (mfa_otp, set_mfa_otp) = create_signal(cx, String::from(""));
	let (mfa_otp_error, set_mfa_otp_error) =
		create_signal(cx, String::from(""));

	let username_ref = create_node_ref(cx);
	let password_ref = create_node_ref(cx);

	let handle_login = move |e: ev::SubmitEvent| {
		e.prevent_default();
		let username: HtmlElement<html::Input> = username_ref.get().unwrap();
		let username = username.value();

		let password: HtmlElement<html::Input> = password_ref.get().unwrap();
		let password = password.value();

		let mfa_otp = mfa_otp.get();

		// TODO make the http call here and set errors based on the response
	};

	view! { cx,
		<form class="box-onboard txt-white fc-fs-fs" on:submit=handle_login>
			<div class="fr-sb-bl mb-lg full-width">
				<h1 class="txt-primary txt-xl txt-medium">{"Sign In"}</h1>
				<p class="txt-white txt-thin fr-fs-fs">
					New user?
					<Link
						disabled={login_loading}
						to=AppRoute::LoggedOutRoutes(LoggedOutRoutes::SignUp)
						class="ml-xs"
					>
						Sign Up
					</Link>
				</p>
			</div>
			<Input
				r#type="text"
				class="full-width"
				disabled={login_loading}
				id="username"
				r#ref=username_ref
				placeholder="Username/Email"
				value="test"
				start_icon={
					Some(IconProps::builder()
						.icon(IconType::User)
						.size(ExtraSmall)
						.build())
				}
			/>
			<div class="fr-fs-ct">
				{move || {
					username_error
						.get()
						.some_if_not_empty()
						.map(|username| {
							view! {cx,
								<Alert
									r#type=NotificationType::Error
									class="mt-xs"
									message=username
									/>
							}
						})
				}}
				{move || show_create_account_button
					.with(|value| {
						value.then(move || view! { cx,
							<Link
								disabled={login_loading}
								// onClick={handleCreateNewAccount}
								class="ml-sm txt-underline txt-medium mt-xs"
							>
								Create a new account?
							</Link>
						})
					})
				}
			</div>
			<Input
				class="mt-md full-width"
				r#type={MaybeSignal::derive(cx, move || if show_password.get() {
					"text".to_owned()
				} else {
					"password".to_owned()
				})}
				id="password"
				r#ref=password_ref
				placeholder="Password"
				disabled={login_loading}
				start_icon={
					Some(
						IconProps::builder()
							.icon(IconType::Shield)
							.size(ExtraSmall)
							.build()
					)
				}
				end_icon={
					Some(
						IconProps::builder()
							.icon(MaybeSignal::derive(cx, move || {
								if show_password.get() {
									IconType::Eye
								} else {
									IconType::EyeOff
								}
							}))
							.color(Grey)
							.size(ExtraSmall)
							.click(Rc::new(move |_| {
								set_show_password.update(|value| *value = !*value);
							}))
							.build()
					)
				}
			/>
			{move || {
				password_error
					.get()
					.some_if_not_empty()
					.map(|password| {
						view! {cx,
							<Alert
								r#type=NotificationType::Error
								class="mt-xs"
								message={password}
								/>
						}
					})
			}}
			{move || show_otp_input.get().then(|| {
				view! { cx,
					<p class="mt-xl txt-center txt-grey">
						Enter the OTP generated by your authenticator app to log in. <br />
						This additional step is required as "you've" enabled Two-Factor
						Authentication for your account.
					</p>
					<OtpInput
						id="mfa-otp"
						otp=mfa_otp.get_untracked()
						on_change=Rc::new(move |otp| {
							set_mfa_otp.update(|value| *value = otp);
						})
						disabled={login_loading}
						class="mt-xl"
						/>
					{move || {
						mfa_otp_error
							.get()
							.some_if_not_empty()
							.map(|mfa_otp| {
								view! {cx,
									<Alert
										r#type=NotificationType::Error
										class="mt-xs"
										message={mfa_otp}
										/>
								}
							})
					}}
				}
			})}
			<div class="fr-sb-ct full-width mt-xs">
				<Link
					to=AppRoute::LoggedOutRoutes(LoggedOutRoutes::ForgotPassword)
					disabled={login_loading}>
					Forgot Password?
				</Link>
			</div>
			{move || if login_loading.get() {
				view! { cx,
					<Spinner class="mt-md mr-xl ml-auto" />
				}
			} else {
				view! { cx,
					<Link
						r#type="submit"
						variant=LinkVariant::Contained
						class="mt-md ml-auto">
						LOGIN
					</Link>
				}
			}}
		</form>
	}
}
