use std::rc::Rc;

use crate::prelude::*;

#[derive(Debug, Clone, Default)]
struct LoginData {
	username: String,
	password: String,
	mfa_otp: String,
}

/// The login page
#[component]
pub fn SignUp(
	/// The scope of the component
	cx: Scope,
) -> impl IntoView {
	let (login_loading, set_login_loading) = create_signal(cx, false);
	let (show_password, set_show_password) = create_signal(cx, false);
	let (show_create_account_button, set_show_create_account_button) =
		create_signal(cx, false);
	let (show_otp_input, set_show_otp_input) = create_signal(cx, false);
	let (inputs, set_inputs) = create_signal(cx, LoginData::default());
	let (input_errors, set_input_errors) =
		create_signal(cx, LoginData::default());

	let handle_login = |e: ev::SubmitEvent| {
		e.prevent_default();
	};

	view! { cx,
		<form class="box-onboard txt-white fc-fs-fs" on:submit=handle_login>
			<div class="fr-sb-bl mb-lg full-width">
				<h1 class="txt-primary txt-xl txt-medium">{"Sign Up"}</h1>
				<p class="txt-white txt-thin fr-fs-fs">
					Existing user?
					<Link
						disabled={login_loading}
						to=AppRoute::LoggedOutRoutes(LoggedOutRoutes::Login)
						class="ml-xs"
					>
						Login
					</Link>
				</p>
			</div>
			<Input
				r#type="text"
				class="full-width"
				disabled={login_loading}
				id="username"
				placeholder="Username/Email"
				value="test"
				start_icon={
					Some(IconProps::builder()
						.icon(IconType::User)
						.size(ExtraSmall)
						.build())
				}
			/>
			<div class="fr-fs-ct">
				{move || {
					input_errors
						.get()
						.username
						.some_if_not_empty()
						.map(|username| {
							view! {cx,
								<Alert
									r#type=NotificationType::Error
									class="mt-xs"
									message=username
									/>
							}
						})
				}}
				{move || show_create_account_button
					.with(|value| {
						value.then(move || view! { cx,
							<Link
								disabled={login_loading}
								// onClick={handleCreateNewAccount}
								class="ml-sm txt-underline txt-medium mt-xs"
							>
								Create a new account?
							</Link>
						})
					})
				}
			</div>
			<Input
				class="mt-md full-width"
				r#type={MaybeSignal::derive(cx, move || if show_password.get() {
					"text".to_owned()
				} else {
					"password".to_owned()
				})}
				id="password"
				placeholder="Password"
				disabled={login_loading}
				start_icon={
					Some(
						IconProps::builder()
							.icon(IconType::Shield)
							.size(ExtraSmall)
							.build()
					)
				}
				end_icon={
					Some(
						IconProps::builder()
							.icon(MaybeSignal::derive(cx, move || {
								if show_password.get() {
									IconType::Eye
								} else {
									IconType::EyeOff
								}
							}))
							.color(Grey)
							.size(ExtraSmall)
							.click(Rc::new(move |_| {
								set_show_password.update(|value| *value = !*value);
							}))
							.build()
					)
				}
			/>
			{move || {
				input_errors
					.get()
					.password
					.some_if_not_empty()
					.map(|password| {
						view! {cx,
							<Alert
								r#type=NotificationType::Error
								class="mt-xs"
								message={password}
								/>
						}
					})
			}}
			{move || show_otp_input.get().then(|| {
				view! { cx,
					<p className="mt-md">
						{"Enter the OTP generated by your authenticator app to log in. <br />
						This additional step is required as you've enabled Two-Factor
						Authentication for your account."}
					</p>
					// <OtpInput
					// 	otp={inputs.mfaOtp}
					// 	onChange={handleOtpChange}
					// 	disabled={loginLoading}
					// 	className="mt-xs"
					// />
					{move || {
						input_errors
							.get()
							.mfa_otp
							.some_if_not_empty()
							.map(|mfa_otp| {
								view! {cx,
									<Alert
										r#type=NotificationType::Error
										class="mt-xs"
										message={mfa_otp}
										/>
								}
							})
					}}
				}
			})}
			<div class="fr-sb-ct full-width mt-xs">
				<Link
					to=AppRoute::LoggedOutRoutes(LoggedOutRoutes::ForgotPassword)
					disabled={login_loading}>
					Forgot Password?
				</Link>
			</div>
			{move || if login_loading.get() {
				view! { cx,
					<Spinner class="mt-md mr-xl ml-auto" />
				}
			} else {
				view! { cx,
					<Link r#type="submit" variant=LinkVariant::Contained class="mt-md ml-auto">
						LOGIN
					</Link>
				}
			}}
		</form>
	}
}
